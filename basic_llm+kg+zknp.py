# -*- coding: utf-8 -*-
"""Basic LLM+KG+ZKNP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RY2TeGAy2BAK2C6IJEhtdZEcxAxCRzZX
"""

import pandas as pd
import networkx as nx
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline
import hashlib
import random

!pip install opendatasets
import opendatasets as od
od.download("https://www.kaggle.com/datasets/ihssanened/mimic-iii-clinical-databaseopen-access?select=LABEVENTS.csv")

# -------------------------------
# Step 1: Load/Simulate Patient Data (MIMIC-III dummy)
# -------------------------------
# In practice: load diagnoses_icd, prescriptions, noteevents tables
patients = pd.DataFrame({
    "patient_id": [1, 2, 3],
    "diagnosis": ["Hypertension", "Diabetes Type 2", "Myocardial Infarction"],
    "history": ["Smoker", "Obese", "Prior MI"]
})

print("Patient Data\n", patients)

# -------------------------------
# Step 2: Build/Load Knowledge Graph (DrugBank/DRKG simulated)
# -------------------------------
G = nx.DiGraph()
G.add_edge("Hypertension", "Metoprolol", relation="treats")
G.add_edge("Diabetes Type 2", "Metformin", relation="treats")
G.add_edge("Myocardial Infarction", "Aspirin", relation="prevents recurrence")

print("KG nodes:", G.nodes)

# -------------------------------
# Step 3: LLM for Recommendation
# -------------------------------
# Using BioGPT or similar fine-tuned model; here use T5-base for demo
tokenizer = AutoTokenizer.from_pretrained("t5-small")
model = AutoModelForSeq2SeqLM.from_pretrained("t5-small")

llm = pipeline("text2text-generation", model=model, tokenizer=tokenizer)

def recommend_drug(patient_row):
    diag = patient_row["diagnosis"]
    hist = patient_row["history"]

    # 1. Query KG
    if diag in G:
        drug = list(G.successors(diag))[0]
    else:
        drug = "UnknownDrug"

    # 2. Generate Explanation with LLM
    prompt = f"Patient with {diag} and history of {hist}. Why is {drug} recommended?"
    explanation = llm(prompt, max_length=50, do_sample=True)[0]['generated_text']

    return drug, explanation

patients[["drug", "explanation"]] = patients.apply(recommend_drug, axis=1, result_type="expand")

print("\nRecommendations with Explanations\n", patients)

# -------------------------------
# Step 4: Zero-Knowledge Proof (Simplified Demo)
# -------------------------------
# Instead of exposing diagnosis directly, hash it to prove usage
def zk_proof(diagnosis, drug):
    secret = f"{diagnosis}:{drug}"
    proof = hashlib.sha256(secret.encode()).hexdigest()
    return proof

patients["zk_proof"] = patients.apply(lambda x: zk_proof(x["diagnosis"], x["drug"]), axis=1)

print("\nWith ZKP Proofs\n", patients)

# -------------------------------
# Step 5: Verification Function
# -------------------------------
def verify_proof(diagnosis, drug, proof):
    expected = hashlib.sha256(f"{diagnosis}:{drug}".encode()).hexdigest()
    return expected == proof

# Test verification
test_patient = patients.iloc[0]
print("\nVerification:", verify_proof(test_patient.diagnosis, test_patient.drug, test_patient.zk_proof))